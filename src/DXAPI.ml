(* Do not modify this file by hand. It is automatically generated by
   util/generateOCamlAPIWrappers_ml.py. *)

let app_add_categories ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "addCategories"]
    | None -> [app_name_or_id; "addCategories"]
  DX.api_call ~retry fully_qualified_route input


let app_add_developers ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "addDevelopers"]
    | None -> [app_name_or_id; "addDevelopers"]
  DX.api_call ~retry fully_qualified_route input


let app_add_tags ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "addTags"]
    | None -> [app_name_or_id; "addTags"]
  DX.api_call ~retry fully_qualified_route input


let app_delete ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "delete"]
    | None -> [app_name_or_id; "delete"]
  DX.api_call ~retry fully_qualified_route input


let app_describe ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "describe"]
    | None -> [app_name_or_id; "describe"]
  DX.api_call ~retry fully_qualified_route input


let app_get ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "get"]
    | None -> [app_name_or_id; "get"]
  DX.api_call ~retry fully_qualified_route input


let app_install ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "install"]
    | None -> [app_name_or_id; "install"]
  DX.api_call ~retry fully_qualified_route input


let app_list_categories ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "listCategories"]
    | None -> [app_name_or_id; "listCategories"]
  DX.api_call ~retry fully_qualified_route input


let app_list_developers ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "listDevelopers"]
    | None -> [app_name_or_id; "listDevelopers"]
  DX.api_call ~retry fully_qualified_route input


let app_publish ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "publish"]
    | None -> [app_name_or_id; "publish"]
  DX.api_call ~retry fully_qualified_route input


let app_remove_categories ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "removeCategories"]
    | None -> [app_name_or_id; "removeCategories"]
  DX.api_call ~retry fully_qualified_route input


let app_remove_developers ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "removeDevelopers"]
    | None -> [app_name_or_id; "removeDevelopers"]
  DX.api_call ~retry fully_qualified_route input


let app_remove_tags ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "removeTags"]
    | None -> [app_name_or_id; "removeTags"]
  DX.api_call ~retry fully_qualified_route input


let app_run ?(retry=false) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "run"]
    | None -> [app_name_or_id; "run"]
  DX.api_call ~retry fully_qualified_route input


let app_uninstall ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "uninstall"]
    | None -> [app_name_or_id; "uninstall"]
  DX.api_call ~retry fully_qualified_route input


let app_update ?(retry=true) ?alias app_name_or_id input =
  let fully_qualified_route = match alias with
    | Some x -> [app_name_or_id; x; "update"]
    | None -> [app_name_or_id; "update"]
  DX.api_call ~retry fully_qualified_route input


let app_new ?(retry=false) input = DX.api_call ~retry ["app"; "new"] input


let applet_add_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTags"] input


let applet_add_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTypes"] input


let applet_close ?(retry=true) object_id input = DX.api_call ~retry [object_id; "close"] input


let applet_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let applet_get ?(retry=true) object_id input = DX.api_call ~retry [object_id; "get"] input


let applet_get_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "getDetails"] input


let applet_list_projects ?(retry=true) object_id input = DX.api_call ~retry [object_id; "listProjects"] input


let applet_remove_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTags"] input


let applet_remove_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTypes"] input


let applet_rename ?(retry=true) object_id input = DX.api_call ~retry [object_id; "rename"] input


let applet_run ?(retry=false) object_id input = DX.api_call ~retry [object_id; "run"] input


let applet_set_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setDetails"] input


let applet_set_properties ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setProperties"] input


let applet_set_visibility ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setVisibility"] input


let applet_new ?(retry=false) input = DX.api_call ~retry ["applet"; "new"] input


let container_clone ?(retry=false) object_id input = DX.api_call ~retry [object_id; "clone"] input


let container_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let container_destroy ?(retry=true) object_id input = DX.api_call ~retry [object_id; "destroy"] input


let container_list_folder ?(retry=true) object_id input = DX.api_call ~retry [object_id; "listFolder"] input


let container_move ?(retry=false) object_id input = DX.api_call ~retry [object_id; "move"] input


let container_new_folder ?(retry=true) object_id input = DX.api_call ~retry [object_id; "newFolder"] input


let container_remove_folder ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeFolder"] input


let container_remove_objects ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeObjects"] input


let container_rename_folder ?(retry=false) object_id input = DX.api_call ~retry [object_id; "renameFolder"] input


let file_add_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTags"] input


let file_add_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTypes"] input


let file_close ?(retry=true) object_id input = DX.api_call ~retry [object_id; "close"] input


let file_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let file_download ?(retry=true) object_id input = DX.api_call ~retry [object_id; "download"] input


let file_get_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "getDetails"] input


let file_list_projects ?(retry=true) object_id input = DX.api_call ~retry [object_id; "listProjects"] input


let file_remove_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTags"] input


let file_remove_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTypes"] input


let file_rename ?(retry=true) object_id input = DX.api_call ~retry [object_id; "rename"] input


let file_set_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setDetails"] input


let file_set_properties ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setProperties"] input


let file_set_visibility ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setVisibility"] input


let file_upload ?(retry=true) object_id input = DX.api_call ~retry [object_id; "upload"] input


let file_new ?(retry=false) input = DX.api_call ~retry ["file"; "new"] input


let gtable_add_rows ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addRows"] input


let gtable_add_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTags"] input


let gtable_add_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTypes"] input


let gtable_close ?(retry=true) object_id input = DX.api_call ~retry [object_id; "close"] input


let gtable_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let gtable_get ?(retry=true) object_id input = DX.api_call ~retry [object_id; "get"] input


let gtable_get_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "getDetails"] input


let gtable_list_projects ?(retry=true) object_id input = DX.api_call ~retry [object_id; "listProjects"] input


let gtable_next_part ?(retry=true) object_id input = DX.api_call ~retry [object_id; "nextPart"] input


let gtable_remove_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTags"] input


let gtable_remove_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTypes"] input


let gtable_rename ?(retry=true) object_id input = DX.api_call ~retry [object_id; "rename"] input


let gtable_set_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setDetails"] input


let gtable_set_properties ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setProperties"] input


let gtable_set_visibility ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setVisibility"] input


let gtable_new ?(retry=false) input = DX.api_call ~retry ["gtable"; "new"] input


let job_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let job_stream_log ?(retry=false) object_id input = DX.api_call ~retry [object_id; "streamLog"] input


let job_terminate ?(retry=true) object_id input = DX.api_call ~retry [object_id; "terminate"] input


let job_new ?(retry=false) input = DX.api_call ~retry ["job"; "new"] input


let notifications_get ?(retry=true) input = DX.api_call ~retry ["notifications"; "get"] input


let notifications_mark_read ?(retry=true) input = DX.api_call ~retry ["notifications"; "markRead"] input


let project_add_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTags"] input


let project_clone ?(retry=false) object_id input = DX.api_call ~retry [object_id; "clone"] input


let project_decrease_permissions ?(retry=true) object_id input = DX.api_call ~retry [object_id; "decreasePermissions"] input


let project_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let project_destroy ?(retry=true) object_id input = DX.api_call ~retry [object_id; "destroy"] input


let project_invite ?(retry=false) object_id input = DX.api_call ~retry [object_id; "invite"] input


let project_leave ?(retry=true) object_id input = DX.api_call ~retry [object_id; "leave"] input


let project_list_folder ?(retry=true) object_id input = DX.api_call ~retry [object_id; "listFolder"] input


let project_move ?(retry=false) object_id input = DX.api_call ~retry [object_id; "move"] input


let project_new_folder ?(retry=true) object_id input = DX.api_call ~retry [object_id; "newFolder"] input


let project_remove_folder ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeFolder"] input


let project_remove_objects ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeObjects"] input


let project_remove_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTags"] input


let project_rename_folder ?(retry=false) object_id input = DX.api_call ~retry [object_id; "renameFolder"] input


let project_set_properties ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setProperties"] input


let project_subscribe ?(retry=false) object_id input = DX.api_call ~retry [object_id; "subscribe"] input


let project_unsubscribe ?(retry=false) object_id input = DX.api_call ~retry [object_id; "unsubscribe"] input


let project_update ?(retry=true) object_id input = DX.api_call ~retry [object_id; "update"] input


let project_new ?(retry=false) input = DX.api_call ~retry ["project"; "new"] input


let record_add_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTags"] input


let record_add_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "addTypes"] input


let record_close ?(retry=true) object_id input = DX.api_call ~retry [object_id; "close"] input


let record_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let record_get_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "getDetails"] input


let record_list_projects ?(retry=true) object_id input = DX.api_call ~retry [object_id; "listProjects"] input


let record_remove_tags ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTags"] input


let record_remove_types ?(retry=true) object_id input = DX.api_call ~retry [object_id; "removeTypes"] input


let record_rename ?(retry=true) object_id input = DX.api_call ~retry [object_id; "rename"] input


let record_set_details ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setDetails"] input


let record_set_properties ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setProperties"] input


let record_set_visibility ?(retry=true) object_id input = DX.api_call ~retry [object_id; "setVisibility"] input


let record_new ?(retry=false) input = DX.api_call ~retry ["record"; "new"] input


let system_find_affiliates ?(retry=true) input = DX.api_call ~retry ["system"; "findAffiliates"] input


let system_find_apps ?(retry=true) input = DX.api_call ~retry ["system"; "findApps"] input


let system_find_data_objects ?(retry=true) input = DX.api_call ~retry ["system"; "findDataObjects"] input


let system_find_jobs ?(retry=true) input = DX.api_call ~retry ["system"; "findJobs"] input


let system_find_projects ?(retry=true) input = DX.api_call ~retry ["system"; "findProjects"] input


let system_find_users ?(retry=true) input = DX.api_call ~retry ["system"; "findUsers"] input


let system_find_project_members ?(retry=true) input = DX.api_call ~retry ["system"; "findProjectMembers"] input


let system_shorten_url ?(retry=true) input = DX.api_call ~retry ["system"; "shortenURL"] input


let user_describe ?(retry=true) object_id input = DX.api_call ~retry [object_id; "describe"] input


let user_update ?(retry=false) object_id input = DX.api_call ~retry [object_id; "update"] input

