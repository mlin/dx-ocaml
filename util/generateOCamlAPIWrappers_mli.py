#!/usr/bin/env python2.7
#
# This script is a modified derivative of generatePythonAPIWrappers.py from
# dx-toolkit, which is:
#
# Copyright (C) 2013 DNAnexus, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may not
#   use this file except in compliance with the License. You may obtain a copy
#   of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.

import json
import re
import sys

preamble = '''(** Wrapper functions for each individual method in the DNAnexus API. 

These functions are thin wrappers around {! DNAnexus.api_call } for individual
API methods. Each function has an optional [retry] argument, which
enables/disables the retry logic described in the documentation for {!
DNAnexus.api_call }. This argument defaults to true for idempotent methods,
and false for others.

@see < http://wiki.dnanexus.com/API-Specification-v1.0.0/Introduction# > DNAnexus API Specification
*)
module API : sig
  (* Do not modify this module signature by hand. It is automatically generated by
     util/generateOCamlAPIWrappers_mli.py. *)'''

class_method_template = '''
  (** Invokes the [{route}] API method with the given JSON input, returning the JSON output.
  {wiki_ref} *)
  val {wrapper_method_name} : ?retry:bool -> JSON.t -> JSON.t'''

object_method_template = '''
  (** Invokes the [{route}] API method with the given object ID and JSON input, returning the JSON output.
  {wiki_ref} *)
  val {wrapper_method_name} : ?retry:bool -> string -> JSON.t -> JSON.t'''

app_object_method_template = '''
  (** Invokes the [/app-xxxx/{api_method_name}] API method with the given app name/ID and JSON input, returning the JSON output.
  {wiki_ref} *)
  val {wrapper_method_name} : ?retry:bool -> ?alias:string -> string -> JSON.t -> JSON.t'''

def make_wiki_ref(route, url):
    return ("@see < " + url + " > DNAnexus API Specification : " + route) if url else ""

def make_class_method(wrapper_method_name, route, retry=False, url=None):
    pieces = route.split('/')
    return class_method_template.format(wrapper_method_name=wrapper_method_name, route=route, klass=pieces[1], method=pieces[2], retry=retry, wiki_ref=make_wiki_ref(route, url))

def make_object_method(wrapper_method_name, api_method_name, route, retry=False, url=None):
    return object_method_template.format(wrapper_method_name=wrapper_method_name, api_method_name=api_method_name, route=route, retry=retry, wiki_ref=make_wiki_ref(route, url))

def make_app_object_method(wrapper_method_name, api_method_name, retry=False, url=None):
    return app_object_method_template.format(wrapper_method_name=wrapper_method_name, api_method_name=api_method_name, retry=retry, wiki_ref=make_wiki_ref(route, url))

def camel_case_to_underscore(name):
    """
    Converts a camelCase string to a name_with_underscores.
    """
    return re.sub("[A-Z]+", lambda m: "_" + m.group(0).lower(), name, 0)

print preamble

for method in json.loads(sys.stdin.read()):
    route, signature, opts = method
    camel_cased_method_name = signature.split("(")[0]
    wrapper_method_name = camel_case_to_underscore(camel_cased_method_name)
    retry = "true" if (opts['retryable']) else "false"
    if (opts['objectMethod']):
        root, oid_route, api_method_name = route.split("/")
        if oid_route == 'app-xxxx':
            print make_app_object_method(wrapper_method_name, api_method_name, retry=retry, url=opts.get('wikiLink', None))
        else:
            print make_object_method(wrapper_method_name, api_method_name, route, retry=retry, url=opts.get('wikiLink', None))
    else:
        print make_class_method(wrapper_method_name, route, retry=retry, url=opts.get('wikiLink', None))
